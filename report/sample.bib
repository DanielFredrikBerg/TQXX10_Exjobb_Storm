@online{Storm:2023,
author ={Str\"{o}mb\"{a}ck, Filip},
year = {2023},
title ={Storm},
url ={https://storm-lang.org/},
month ={jan},
lastaccessed ={January 26, 2023},
}

@article{Progvis:2022,
Abstract = {Concurrency and synchronization are two topics that are becomingincreasingly important for computer science students due to thehigh number of cores available in most modern devices. These aretopics that many students struggle with at first, perhaps partiallydue to the inherent nondeterminism and the difficulty to test forabsence of race conditions. Furthermore, previous research indicate that some common mistakes when working with concurrencymight be due students not connecting the concurrency concepts(such as synchronization) to the data that needs to be protected,especially when pointers and references are involved.To address these issues, we propose Progvis, which is a visualization tool aimed specifically at concurrency using the sharedmemory model. It provides a detailed visualization of objects inmemory and their relation to the running threads in order to helpstudents connect concurrency issues with the affected data. Wehave performed an initial, small scale evaluation on wheth},
Author = {Strömbäck, Filip and Mannila, Linda, and Kamkar, Mariam},
Journal = {Australasian Computing Education Conference (ACE ’22) February 14–18, 2022},
Keywords = {Natural Sciences, Computer and Information Sciences, Computer Sciences, Naturvetenskap, Data- och informationsvetenskap, Datavetenskap (datalogi), Social Sciences, Educational Sciences, Didactics, Samhällsvetenskap, Utbildningsvetenskap, Didaktik, concurrency, synchronization, visualization, computer science education},
Pages = {123 - 132},
Title = {Pilot Study of Progvis: A Visualization Tool for Object Graphs and Concurrency via Shared Memory.},
URL = {https://login.e.bibl.liu.se/login?url=https://search.ebscohost.com/login.aspx?direct=true&AuthType=ip,uid&db=edsswe&AN=edsswe.oai.DiVA.org.liu.183003&lang=sv&site=eds-live&scope=site},
Year = {2022},
}

@mastersthesis{Stromback:2017,
author = {Str\"{o}mb\"{a}ck, Filip},
title = {A Syntax Highlighting and Code Formatting Tool for Extensible Languages},
year = {2017},
note = {},
}

@inproceedings{Stromback:2018,
author = {Str\"{o}mb\"{a}ck, Filip},
title = {Storm: A Language Platform for Interacting and Extensible Languages (Tool Demo)},
year = {2018},
isbn = {9781450360296},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3276604.3276982},
doi = {10.1145/3276604.3276982},
abstract = {The ability to extend programming languages with domain-specific concepts is becoming an essential technology for developing complex software. However, many domain-specific languages are implemented in a way that interact poorly with the host language. There are a number of tools that aim to improve the situation by simplifying the creation of domain-specific languages, and allow easier interactions between the host language and the domain-specific language. However, many of these tools are limited to a single host language, and rarely allow extending the language used for language creation. To improve the situation, we created the language platform Storm, which aims to make the creation and usage of multiple extensible languages easy and seamless. This is accomplished by means of a shared, standardized namespace and in-process code generation, which gives Storm a high degree of extensibility, making it possible to extend or replace the built-in languages at will.},
booktitle = {Proceedings of the 11th ACM SIGPLAN International Conference on Software Language Engineering},
pages = {60–64},
numpages = {5},
keywords = {domain-specific language, DSL, extensible language},
location = {Boston, MA, USA},
series = {SLE 2018}
}

@inproceedings{Hidalgo:2016,
author = {Hidalgo-C\'{e}spedes, Jeisson and Mar\'{\i}n-Ravent\'{o}s, Gabriela and Lara-Villagr\'{a}n, Vladimir},
title = {Learning Principles in Program Visualizations: A Systematic Literature Review},
year = {2016},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/FIE.2016.7757692},
doi = {10.1109/FIE.2016.7757692},
abstract = {Program visualizations help students understand the runtime behavior of other programs. They are educational tools to complement lectures or replace inefficient static drawings. A recent survey found 46 program visualizations developed from 1979 to 2012 reported that their effectiveness is unclear. They also evaluated learner engagement strategies implemented by visualization systems, but other learning principles were not considered. Learning principles are potential key factors in the success of program visualization as learning tools. In this paper, we identified 16 principles that may contribute to the effectiveness of a learning tool based on Vygotsky's learning theory. We hypothesize that some of these principles could be supported by incorporating visual concrete allegories and gamification. We conducted a literature review to know if these principles are supported by existing solutions. We found six new systems between 2012 and 2015. Very few systems consider a learning theory as theoretical framework. Only two out the 16 learning principles are supported by existing visualizations. All systems use unconnected visual metaphors, two use concrete visual metaphors, and one implemented a gamification principle. We expect that using concrete visual allegories and gamification in future program visualizations will significantly improve their effectiveness.},
booktitle = {2016 IEEE Frontiers in Education Conference (FIE)},
pages = {1–9},
numpages = {9},
location = {Eire, PA, USA}
}


@inproceedings{Naps:2002,
author = {Naps, Thomas L. and R\"{o}\ss{}ling, Guido and Almstrum, Vicki and Dann, Wanda and Fleischer, Rudolf and Hundhausen, Chris and Korhonen, Ari and Malmi, Lauri and McNally, Myles and Rodger, Susan and Vel\'{a}zquez-Iturbide, J. \'{A}ngel},
title = {Exploring the Role of Visualization and Engagement in Computer Science Education},
year = {2002},
isbn = {9781450374491},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/960568.782998},
doi = {10.1145/960568.782998},
abstract = {Visualization technology can be used to graphically illustrate various concepts in computer science. We argue that such technology, no matter how well it is designed, is of little educational value unless it engages learners in an active learning activity. Drawing on a review of experimental studies of visualization effectiveness, we motivate this position against the backdrop of current attitudes and best practices with respect to visualization use. We suggest a new taxonomy of learner engagement with visualization technology. Grounded in Bloom's well-recognized taxonomy of understanding, we suggest metrics for assessing the learning outcomes to which such engagement may lead. Based on these taxonomies of engagement and effectiveness metrics, we present a framework for experimental studies of visualization effectiveness. Interested computer science educators are invited to collaborate with us by carrying out studies within this framework.},
booktitle = {Working Group Reports from ITiCSE on Innovation and Technology in Computer Science Education},
pages = {131–152},
numpages = {22},
location = {Aarhus, Denmark},
series = {ITiCSE-WGR '02}
}



@article{Sorva:2013,
author = {Sorva, Juha and Karavirta, Ville and Malmi, Lauri},
title = {A Review of Generic Program Visualization Systems for Introductory Programming Education},
year = {2013},
issue_date = {November 2013},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {13},
number = {4},
url = {https://doi.org/10.1145/2490822},
doi = {10.1145/2490822},
abstract = {This article is a survey of program visualization systems intended for teaching beginners about the runtime behavior of computer programs. Our focus is on generic systems that are capable of illustrating many kinds of programs and behaviors. We inclusively describe such systems from the last three decades and review findings from their empirical evaluations. A comparable review on the topic does not previously exist; ours is intended to serve as a reference for the creators, evaluators, and users of educational program visualization systems. Moreover, we revisit the issue of learner engagement which has been identified as a potentially key factor in the success of educational software visualization and summarize what little is known about engagement in the context of the generic program visualization systems for beginners that we have reviewed; a proposed refinement of the frameworks previously used by computing education researchers to rank types of learner engagement is a side product of this effort. Overall, our review illustrates that program visualization systems for beginners are often short-lived research prototypes that support the user-controlled viewing of program animations; a recent trend is to support more engaging modes of user interaction. The results of evaluations largely support the use of program visualization in introductory programming education, but research to date is insufficient for drawing more nuanced conclusions with respect to learner engagement. On the basis of our review, we identify interesting questions to answer for future research in relation to themes such as engagement, the authenticity of learning tasks, cognitive load, and the integration of program visualization into introductory programming pedagogy.},
journal = {ACM Trans. Comput. Educ.},
month = {nov},
articleno = {15},
numpages = {64},
keywords = {notional machine, CS1, literature review, program dynamics, program visualization, Introductory programming education, engagement taxonomy, software visualization}
}
}


@book{Kozen:1997,
Author = {Kozen, Dexter},
ISBN = {0387949070},
Publisher = {Springer},
Series = {Undergraduate texts in computer science},
Title = {Automata and computability.},
URL = {https://login.e.bibl.liu.se/login?url=https://search.ebscohost.com/login.aspx?direct=true&AuthType=ip,uid&db=cat00115a&AN=lkp.1179138&site=eds-live&scope=site},
Year = {1997},
}

@book{Bloom:2001,
Author = {Bloom, Benjamin Samuel and Anderson, Lorin W. and Krathwohl, David R. and Airasian, Peter W.},
ISBN = {0321084055},
Publisher = {Longman},
Title = {A taxonomy for learning, teaching, and assessing : a revision of Bloom's taxonomy of educational objectives.},
URL = {https://login.e.bibl.liu.se/login?url=https://search.ebscohost.com/login.aspx?direct=true&AuthType=ip,uid&db=cat00115a&AN=lkp.368887&lang=sv&site=eds-live&scope=site},
Year = {2001},
}
